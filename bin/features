THESIS_ASSIGNMENTS:
    + Teacher "apply" - Moderator "approve"
    + Moderator have options: "apply" / "apply & approve"

PRE-THESIS:
    + Một student apply 2 lần cho cùng một topic -> Dùng findOrCreate thay vì create 
    + Một student có nhiều topic accepted cùng lúc -> Thêm transaction + LOCK (Sequelize hỗ trợ row-level lock).
        await sequelize.transaction(async (t) => {
            const existing = await TopicApplication.findOne({
                where: { studentId, status: 'accepted' },
                lock: t.LOCK.UPDATE,
                transaction: t,
            });
            if (existing) throw new Error('Already has accepted topic');

            await TopicApplication.update(
                { status: 'accepted', decidedAt: new Date() },
                { where: { id: appId }, transaction: t }
            );
        });
    + Topic bị over-accepted (nhiều students accepted cùng 1 topic) -> Hook + transaction
        async beforeUpdate(app, options) {
            if (app.changed('status') && app.status === 'accepted') {
                const accepted = await TopicApplication.findOne({
                where: { topicId: app.topicId, status: 'accepted', id: { [Op.ne]: app.id } },
                transaction: options.transaction,
                lock: options.transaction.LOCK.UPDATE,
                });
                if (accepted) throw new Error('Topic already assigned to another student');
            }
        }
    + 
